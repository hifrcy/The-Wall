{"version":3,"sources":["ModalHelp.js","HashtagInput.js","Footer.js","Header.js","TweetCard.js","App.js","serviceWorker.js","index.js"],"names":["ModalHelp","props","state","modal","toggle","bind","this","setState","closeBtn","className","onClick","Button","color","buttonLabel","Modal","isOpen","ModalHeader","close","ModalBody","ModalFooter","Component","HashtagInput","InputGroup","size","InputGroupAddon","addonType","Input","value","title","placeholder","onChange","onInputContent","type","onXClick","href","getTweet","Footer","Container","fluid","Row","Col","sm","src","alt","Header","id","TweetCard","style","Card","maxheight","CardBody","CardTitle","logo","author","picture","xs","CardText","message","likeNb","width","rtNb","tweetToPost","tweets","statuses","map","tweet","entities","media","media_url","full_text","user","name","profile_image_url","favorite_count","retweet_count","screen_name","App","hashtag","fetch","then","results","json","data","posts","postlike","isTweetPageDisplayed","handleXClick","event","target","replace","handleInputContent","activeTab","handleClickNewButton","tab","height","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","CardColumns","post","sort","a","b","reverse","postTopTweet","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7bf96735.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nclass ModalHelp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  render() {\n    const closeBtn = (\n      <button className=\"close\" onClick={this.toggle}>\n        &times;\n      </button>\n    );\n\n    return (\n      <div className=\"col-1 offset-10\">\n        <Button color=\"primary\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n          #Help\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.toggle} close={closeBtn}>\n            How to use the #Wall ?\n          </ModalHeader>\n          <ModalBody>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim\n            ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n            aliquip ex ea commodo consequat. Duis aute irure dolor in\n            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n            culpa qui officia deserunt mollit anim id est laborum.\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={this.toggle}>Understood !</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ModalHelp;\n","import React from \"react\";\nimport \"./HashtagInput.css\";\nimport { InputGroup, InputGroupAddon, Input, Button } from \"reactstrap\";\n\nconst HashtagInput = props => {\n  return (\n    <div>\n      <InputGroup size=\"lg\">\n        <InputGroupAddon addonType=\"prepend\">#</InputGroupAddon>\n        <Input\n          className=\"sizeInput\"\n          value={props.title}\n          placeholder=\"Your Tag !\"\n          onChange={props.onInputContent}\n          type=\"text\"\n        />\n        <InputGroupAddon addonType=\"append\">\n          <Button color=\"primary\" onClick={props.onXClick}>\n            X\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n      <div className=\"buttonPosition\">\n        <Button\n          href=\"#titleHashtag\"\n          className=\"w-20 mt-5\"\n          color=\"primary\"\n          onClick={() => props.getTweet(props.title)}\n        >\n          <p className=\"buttonText\">#Start</p>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default HashtagInput;\n","import React from \"react\";\nimport \"./Footer.css\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nconst Footer = () => (\n  <Container fluid>\n    <Row className=\"background\">\n      <Col sm=\"6\">\n        <img className=\"img\" src=\"images/logo_wall_white.png\" alt=\"logo_wall\" />\n      </Col>\n      <Col className=\"text-right wilders\" sm=\"6\">\n        Made with <span className=\"heart\">❤</span> by Quentin - Benoît -\n        Corentin - Leuthsouline <br />\n        reactivated and uploaded by <a href=\"https://github.com/hifrcy\" className=\"link\">\n        HiFrcy\n</a>\n      </Col>\n    </Row>\n  </Container>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n  <header>\n    <img className=\"ima\" src=\"images/logo_wall_white.png\" id=\"titleHeader\" alt=\"logo wall\" />\n    <p className=\"text-center\">Transform your tag into an event</p>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\nimport {\n  Card,\n  CardText,\n  CardBody,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nconst TweetCard = props => {\n  return (\n    <div>\n      <Container fluid className=\"p-0\" style={{ \"color\": \"dark\" }}>\n        <Card style={{ maxheight: \"100px\" }} className=\"mt-1\">\n          <CardBody className=\"pt-2 pb-0\">\n            <Row>\n              <CardTitle className=\"w-100\">\n                <img\n                  className=\"float-left mr-2\"\n                  src={props.logo}\n                  alt=\"avatar\"\n                  style={{ \"border-radius\": \"25px\" }}\n                />\n                <div className=\"pt-2\">\n                  {props.author}\n                  <br />\n                  <span style={{ \"font-size\": \"15px\" }}>{props.id}</span>\n                </div>\n              </CardTitle>\n            </Row>\n          </CardBody>\n\n          {props.picture !== \"N/A\" && (\n            <img\n              className=\"w-100\"\n              src={props.picture}\n              style={{ \"max-height\": \"650px\" }}\n              alt=\"tweet\"\n            />\n          )}\n\n          <CardBody className=\"pb-2\">\n            <Row>\n              <Col xs=\"12\">\n                <CardText className=\"pb-2\"  >{props.message}</CardText>\n              </Col>\n              <Col xs=\"6\">\n                <CardText className=\"text-center\">\n                  <span className=\"heart\">❤</span>\n                  {props.likeNb}\n                </CardText>\n              </Col>\n              <Col xs=\"6\">\n                <CardText className=\"text-center\">\n                  <img src=\"images/rt.png\" style={{ width: \"25px\" }} alt=\"RT\" />\n                  {props.rtNb}\n                </CardText>\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </Container>\n    </div>\n  );\n};\n\nexport default TweetCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ModalHelp from \"./ModalHelp\";\nimport HashtagInput from \"./HashtagInput\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport TweetCard from \"./TweetCard\";\nimport classnames from \"classnames\";\nimport {\n  Container,\n  Row,\n  Col,\n  CardColumns,\n  Button,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nconst tweetToPost = tweets => {\n  return tweets.statuses.map(tweet => {\n    const pictureMedia = tweet.entities.media\n      ? tweet.entities.media[0].media_url\n      : \"N/A\";\n    return {\n      picture: pictureMedia,\n      message: tweet.full_text,\n      author: tweet.user.name,\n      logo: tweet.user.profile_image_url,\n      likeNb: tweet.favorite_count,\n      rtNb: tweet.retweet_count,\n      id: `@${tweet.user.screen_name}`\n    };\n  });\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      postlike: [],\n      title: \"\",\n      isTweetPageDisplayed: false,\n      activeTab: \"1\"\n    };\n    this.handleClickNewButton = this.handleClickNewButton.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  getTweet = hashtag => {\n    fetch(`https://safe-savannah-17783.herokuapp.com/?tag=${hashtag}`)\n      .then(results => results.json()) // conversion du résultat en JSON\n      .then(data => {\n        this.setState({\n          posts: tweetToPost(data),\n          postlike: tweetToPost(data),\n          isTweetPageDisplayed: true\n        });\n      });\n  };\n\n  handleClickNewButton() {\n    this.setState({ isTweetPageDisplayed: false });\n  }\n\n  handleXClick = event => {\n    this.setState({\n      title: event.target.value.replace(/\"\"/)\n    });\n  };\n\n  handleInputContent = event => {\n    this.setState({\n      title: event.target.value.replace(\n        /[^A-Za-z0-9\\u00E8\\u00E9\\u00EA\\u00EB\\u00E0\\u00E1\\u00E2\\u00E3\\u00E4\\u00EF\\u00EE\\u00FB\\u00FC\\u00F4\\u00F6]/gi,\n        \"\"\n      )\n    });\n  };\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {!this.state.isTweetPageDisplayed ? (\n          <Container fluid style={{ height: \"100vh\" }}>\n            <Row className=\"justify-content-center\">\n              <Header />\n            </Row>\n            <Row className=\"justify-content-center hashtagRow\">\n              <Col sm=\"6\">\n                <HashtagInput\n                  title={this.state.title}\n                  onInputContent={this.handleInputContent}\n                  getTweet={this.getTweet}\n                  onXClick={this.handleXClick}\n                />\n              </Col>\n            </Row>\n\n            <Row className=\"footerPosition w-100\">\n              <ModalHelp />\n\n              <Footer />\n            </Row>\n          </Container>\n        ) : (\n          <Container fluid className=\"tweet\" style={{ height: \"100vh\" }}>\n            <Row id=\"wallHeader\" style={{ color: \"white\" }}>\n              <h1 id=\"titleHashtag\" className=\"mt-2\">\n                #{this.state.title}\n              </h1>\n\n              <Button onClick={this.handleClickNewButton} color=\"primary\">\n                <p className=\"textButton \">#New</p>\n              </Button>\n            </Row>\n            <Nav tabs className=\"navTabs d-flex justify-content-center\">\n              <NavItem>\n                <NavLink\n                  className={classnames({\n                    active: this.state.activeTab === \"1\"\n                  })}\n                  onClick={() => {\n                    this.toggle(\"1\");\n                  }}\n                >\n                  Tweets\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({\n                    active: this.state.activeTab === \"2\"\n                  })}\n                  onClick={() => {\n                    this.toggle(\"2\");\n                  }}\n                >\n                  Top tweets\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <CardColumns>\n                  {this.state.posts.map(post => (\n                    <TweetCard {...post} />\n                  ))}\n                </CardColumns>\n              </TabPane>\n              <TabPane tabId=\"2\">\n                <Row className=\"justify-content-center\">\n                  <Col xs={{ size: 4 }}>\n                    {/* <CardDeck style={{ width: \"50rem\" }}> */}\n                    {this.state.postlike\n                      .sort(function(a, b) {\n                        return a.likeNb - b.likeNb;\n                      })\n                      .reverse()\n                      .map(postTopTweet => <TweetCard {...postTopTweet} />)\n                      .slice(0, 10)}\n                    {/* </CardDeck> */}\n                  </Col>\n                </Row>\n              </TabPane>\n            </TabContent>\n          </Container>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}